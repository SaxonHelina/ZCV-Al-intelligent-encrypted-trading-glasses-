import json
import os

from IPy import IP
from flask import g
from flask_restful import reqparse

from api.security import user_login_required as login_required, role_required
from api.system.system import get_network_info
from common.base import RestfulBase, raise_401_response, raise_400_response
from common.base import success_response
from common.type_constant.system import ROOT_PW
from common.user.user import get_user_ip
from common.utils import validator
from common.utils.dt import loop_delete_log_table
from extensions import db
from models.system import SystemLog
from models.user.role_config import ROLES

from common.extensions import kv_redis_client as kv


def change_network(inter_name, ip, netmask, gateway, on_boot='yes'):
    if os.path.exists('/etc/sysconfig/network-scripts/'):
        if os.path.exists('/etc/sysconfig/network-scripts/ifcfg-%s' % inter_name):
            os.system('chmod 777 /etc/sysconfig/network-scripts/ifcfg-%s' % inter_name)
            os.system('cd /etc/sysconfig/network-scripts/ && cp ifcfg-%s ifcfg-%s.bak' % (inter_name, inter_name))
        with open('/etc/sysconfig/network-scripts/ifcfg-%s' % inter_name, 'w') as f:
            f.write('''TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=static
DEFROUTE=yes
PEERDNS=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=%s
DEVICE=%s
ONBOOT=%s

IPADDR=%s
NETMASK=%s
GATEWAY=%s
                ''' % (inter_name, inter_name, on_boot, ip, netmask, gateway))
        # os.system('service network restart')
        #         if dns:
        #             if os.path.exists('/etc/resolv.conf'):
        #                 with open('/etc/resolv.conf', 'w') as f:
        #                     f.write('''# Generated by NetworkManager
        # nameserver %s
        #                    ''' % dns)
        #             if os.path.exists('/etc/systemd/resolved.conf'):
        #                 with open('/etc/systemd/resolved.conf', 'r') as f:
        #                     f.write('''# Generated by NetworkManager
        # nameserver %s
        #                                        ''' % dns)
        #
        #             os.system('nmcli con mod %s ipv4.dns "%s"' % (inter_name, dns))
        #             os.system('nmcli con up %s' % inter_name)
        #         elif dns == '':
        #             if os.path.exists('/etc/resolv.conf'):
        #                 with open('/etc/resolv.conf', 'w') as f:
        #                     f.write('# Generated by NetworkManager')
        #             if os.path.exists('/etc/systemd/resolved.conf'):
        #                 with open('/etc/systemd/resolved.conf', 'r') as f:
        #                     f.write('# Generated by NetworkManager')
        #
        #             os.system('nmcli con mod %s ipv4.dns "%s"' % (inter_name, dns))
        #             os.system('nmcli con up %s' % inter_name)

        os.system('\cp -f /etc/sysconfig/network-scripts/ifcfg-%s.bak /root/' % inter_name)
        os.system('rm -rf /etc/sysconfig/network-scripts/ifcfg-%s.bak' % inter_name)

    if os.path.exists('/etc/netplan'):
        os.system('echo %s|sudo -S touch /etc/netplan/01-netplan.yaml' % ROOT_PW)
        os.system('echo %s|sudo -S chmod 777 /etc/netplan/01-netplan.yaml' % ROOT_PW)
        with open('/etc/netplan/01-netplan.yaml', 'w+') as f:
            f.write \
                ('''
network:
    ethernets:
        %s:
            addresses: [%s/24,]
            dhcp4: no
            dhcp6: no
            gateway4: %s
    version: 2
                ''' % (inter_name, ip, gateway))

        os.system('echo %s|sudo -S netplan apply' % ROOT_PW)